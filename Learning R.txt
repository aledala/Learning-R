Factors in R:

To create factors in R, you make use of the function factor()
Example:
sex_vector <- c("Male", "Female", "Female", "Male", "Male")
factor_sex_vector <-factor(sex_vector)
factor_sex_vector
Output: Male, Female

There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.

A nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'.
Example:
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")

factor_animals_vector <- factor(animals_vector)

factor_animals_vector

In contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable 
Example:
temperature_vector <- c("High", "Low", "High","Low", "Medium")

factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))

factor_temperature_vector

When you first get a data set, you will often notice that it contains factors with specific factor levels.
However, sometimes you will want to change the names of these levels for clarity or other reasons.
R allows you to do this with the function levels()
( To change names from F, M to "Female", "Male" )
Syntax:
levels(factor_vector) <- c("name1", "name2",...)

Examples:
survey_vector <- c("M", "F", "F", "M", "M")

factor_survey_vector <- factor(survey_vector)

levels(factor_survey_vector)

output: F, M
# Specify the levels of factor_survey_vector

levels(factor_survey_vector) <- c("Female","Male")

levels(factor_survey_vector)
output: Female, Male

Summary() gives the quick overview of the variable
Example:
# Build factor_survey_vector with clean levels

survey_vector <- c("M", "F", "F", "M", "M")

factor_survey_vector <- factor(survey_vector)

levels(factor_survey_vector) <- c("Female", "Male")

factor_survey_vector

# Generate summary for survey_vector

summary(survey_vector)
output : 5 

# Generate summary for factor_survey_vector

summary(factor_survey_vector)

output: Female 2 Male 3

Comparing factor values:
How interesting!
By default, R returns NA when you try to compare values in a factor, since the idea doesn't make sense. 

Example:
# Build factor_survey_vector with clean levels

survey_vector <- c("M", "F", "F", "M", "M")

factor_survey_vector <- factor(survey_vector)

levels(factor_survey_vector) <- c("Female", "Male")


# Male

male <- factor_survey_vector[1]


# Female

female <- factor_survey_vector[2]


# Battle of the sexes: Male 'larger' than female?

male > female 
Output: NA, Warning: > not meaningful for factors

Comparing ordered factors:

# Create factor_speed_vector

speed_vector <- c("medium", "slow", "slow", "medium", "fast")

factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))


# Factor value for second data analyst

da2 <- factor_speed_vector[2]


# Factor value for fifth data analyst

da5 <- factor_speed_vector[5]


# Is data analyst 2 faster than data analyst 5?

da2>da5
Output: False



Data Frames:

The function head() enables you to show the first observations of a data frame.
Similarly, the function tail() prints out the last observations in your data set.
Both head() and tail() print a top line called the 'header', which contains the names of the different variables in your data set.
str() function gives the full structure of the dataframe
For a dataframe, it tells you 
The total number of observations (e.g. 32 car types)
The total number of variables (e.g. 11 car features)
A full list of the variables names (e.g. mpg, cyl ... )
The data type of each variable (e.g. num)
The first observations
To create dataframe,
Use data.frame()
Example:
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")

type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
          "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")

diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)

rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)

rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)


# Create a data frame from the vectors

planets_df <- data.frame(name,type,diameter,rotation,rings)

planets_df

Selection of dataframe:
Similar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ].
By using a comma, you can indicate what to select from the rows and the columns respectively. 
For example:
my_df[1,2] selects the value at the first row and second column in my_df.
my_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.
Sometimes you want to select all elements of a row or column.
For example, my_df[1, ] selects all elements of the first row. 

selection of dataframe using column names:
example:
my_df[1:3,"type"] 
If the column has names you can use the $ sign as shorcut :

my_df$column_name

Subset Function:
subset(my_df, subset = some_condition)
The first argument of subset() specifies the data set for which you want a subset.
By adding the second argument, you give R the necessary information and conditions to select the correct subset.

Example:
subset(planets_df, subset=diameter<1)

Sorting in R:
In data analysis you can sort your data according to a certain variable in the data set.
In R, this is done with the help of the function order().
Example:
# planets_df is pre-loaded in your workspace


# Use order() to create positions

positions <-  order(planets_df$diameter)

positions

# Use positions to sort planets_df

planets_df[positions, ]

Lists in R:
A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way.
These objects can be matrices, vectors, data frames, even other lists, etc.
It is not even required that these objects are related to each other in any way.

You could say that a list is some kind super data type: you can store practically any piece of information in it!

Syntax :
comp1<-c(10,20,30)
my_list <- list(comp1, comp2 ...)

To give names to the list elements:

# Vector with numerics from 1 up to 10

my_vector <- 1:10 


# Matrix with numerics from 1 up to 9

my_matrix <- matrix(1:9, ncol = 3)


# First 10 elements of the built-in data frame mtcars

my_df <- mtcars[1:10,]


# Adapt list() call to give the components names

my_list<- list(my_vector, my_matrix, my_df)

names(my_list)<- c("vec","mat","df")

# Print out my_list

my_list

or you can give:
shining_list <- list(moviename = mov, actors=act,reviews=rev)

shining_list


To select components of the list:
shining_list[[1]] *** Double square bracket
shining_list[["reviews"]]
shining_list$reviews

Specific elements of the list:

shining_list[[2]][1]
shining_list[["actors"]][2]

To extend the lists:
ext_list <- c(my_list , my_val)
ext_list <- c(my_list, my_name = my_val)

Relational Operators:

2>3 FALSE
Hello>Morning TRUE (R compares in alphabetical order)
TRUE>FALSE is FALSE since (TRUE =1, FALSE =0)
variable<- c(10, 20, 30)
variable>20
FALSE FALSE TRUE
Logical Operators:
Used to combine and check more than one condition
& , | and !
!isnumeric(5) is FALSE

&& || operator checks only the first element of each vector

Can use logical operators on vectors and matrices

While, for, if else if , else loops in R same as other languages
(
Functions in R:
# The tic-tac-toe matrix ttt has already been defined for you

# define the double for loop

for (i in 1:nrow(ttt) ){
  
for (j in 1:ncol(ttt)) {
    
print(paste( "On row", i, "and column", j ,"the board contains",ttt[i,j]))

 }
}

print(ttt)



Functions in R:
Example:
mean(x)
advances:
mean(x, trim=0, na.rm=TRUE)
na.rm removes the missing values
sum---- Sum()
mean----mean()
absolute difference ----abs(a-b)

Writing your own function:
my_fun <- function(arg1, arg2) {
  body
}
Example:

pow_two<-function(x){
  x*x
}
pow_two(12)

Variables declared inside the function are not accessible outside the function

R passes arguments by value. What does this mean? Simply put, it means that an R function cannot change the variable that you input to that function

R Packages:

install.packages(), which as you can expect, installs a given package. 
library() which loads packages, i.e. attaches them to the search list on your R workspace. 


Search() will allow you to look at the currently attached packages

The library() and require() functions are not very picky when it comes down to argument types: both library(rjson) and library("rjson") work perfectly fine for loading a package.
Example:
library(“ggplot”)
library(ggplot) are the same

lapply:

lapply(X, FUN, ...)


To put it generally, lapply takes a vector or list X, and applies the function FUN to each of its members. If FUN requires additional arguments, you pass them after you've specified X and FUN (...). The output of lapply() is a list, the same length as X, where each element is the result of applying FUN on the corresponding element of X

Anonymous functions in R:


Previously, you learned that functions in R are objects in their own right. This means that they aren't automatically bound to a name. When you create a function, you can use the assignment operator to give the function a name. It's perfectly possible, however, to not give the function a name. This is called an anonymous function:
# Named function
triple <- function(x) { 3 * x }

# Anonymous function with same implementation
function(x) { 3 * x }

# Use anonymous function inside lapply()
lapply(list(1,2,3), function(x) { 3 * x })
SPLIT function 
example:
split <- strsplit(pioneers, split = ":")

TYPE OF THE VARIABLE in the list:
result←lapply(somelist, class)
result←lapply(somelist, nchar)
int 8
char 4
int 5
unlist(lapply(cities,nchar))
8 4 5 
sapply(cities,nchar)
new york 8
paris 4

Can you tell the difference between the output of lapply() and sapply()? The former returns a list, while the latter returns a vector that is a simplified version of this list

VAPPLY:
vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)

Over the elements inside X, the function FUN is applied. The FUN.VALUE argument expects a template for the return argument of this function FUN. USE.NAMES is TRUE by default; in this case vapply() tries to generate a named array, if possible.

vapply() can be considered a more robust version of sapply(), because you explicitly restrict the output of the function you want to apply. 


Some useful functions:
	seq(): Generate sequences, by specifying the from, to, and by arguments. 
    • rep(): Replicate elements of vectors and lists. 
    • sort(): Sort a vector in ascending order. Works on numerics, but also on character strings and logicals. 
    • rev(): Reverse the elements in a data structures for which reversal is defined. 
    • str(): Display the structure of any R object. 
    • append(): Merge vectors or lists. 
    • is.*(): Check for the class of an R object. 
    • as.*(): Convert an R object from one class to another. 
    • unlist(): Flatten (possibly embedded) lists to produce a vector. 

